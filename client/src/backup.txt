// npm install formik nodemailer

import React from 'react';
import { useFormik } from 'formik';

const Form = () => {
  const formik = useFormik({
    initialValues: {
      name: '',
      email: '',
    },
    validate: values => {
      const errors = {};

      if (!values.name) {
        errors.name = 'Required';
      }

      if (!values.email) {
        errors.email = 'Required';
      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(values.email)) {
        errors.email = 'Invalid email address';
      }

      return errors;
    },
    onSubmit: values => {
      sendOtp(values);
    },
  });

  const sendOtp = values => {
    // You can implement the logic to send the OTP via email using nodemailer or any other email service.
    // Here's a sample implementation using nodemailer:
    // You need to configure nodemailer with your email provider credentials and SMTP settings.
    // For simplicity, this example assumes a local mail server running on port 587.

    const nodemailer = require('nodemailer');

    const transporter = nodemailer.createTransport({
      host: 'localhost',
      port: 587,
      auth: {
        user: 'your-email@example.com',
        pass: 'your-email-password',
      },
    });

    const mailOptions = {
      from: 'your-email@example.com',
      to: values.email,
      subject: 'OTP Verification',
      text: 'Your OTP is: 1234', // Replace with the actual OTP generated dynamically.
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.log('Error sending OTP:', error);
      } else {
        console.log('OTP sent:', info.response);
      }
    });
  };

  return (
    <form onSubmit={formik.handleSubmit}>
      <div>
        <label htmlFor="name">Name</label>
        <input
          type="text"
          id="name"
          name="name"
          onChange={formik.handleChange}
          value={formik.values.name}
        />
        {formik.errors.name && formik.touched.name && <div>{formik.errors.name}</div>}
      </div>

      <div>
        <label htmlFor="email">Email</label>
        <input
          type="email"
          id="email"
          name="email"
          onChange={formik.handleChange}
          value={formik.values.email}
        />
        {formik.errors.email && formik.touched.email && <div>{formik.errors.email}</div>}
      </div>

      <button type="submit">Submit</button>
    </form>
  );
};

export default Form;


//############################validation:##########################


const handleChange = (e) => {
  const { name, value } = e.target;
  let errorMessage = '';

  // Perform validation based on the input field's name
  if (name === 'name') {
    if (value.trim() === '') {
      errorMessage = 'Name is required';
    }
  } else if (name === 'email') {
    if (value.trim() === '') {
      errorMessage = 'Email is required';
    } else if (!/^\S+@\S+\.\S+$/.test(value)) {
      errorMessage = 'Invalid email format';
    }
  } else if (name === 'message') {
    if (value.trim() === '') {
      errorMessage = 'Message is required';
    }
  }

  setFormData(prevState => ({
    ...prevState,
    [name]: value,
    error: errorMessage // Store the error message in the formData state
  }));
};


//##########################validation-2:##############################




import React, { useState } from 'react';

const MyForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    

    
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const jsonData = JSON.stringify(formData);
    console.log(jsonData);
    // You can perform further actions with the JSON data, like sending it to an API endpoint.
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input type="text" name="name" value={formData.name} onChange={handleChange} />
      </label>
      <label>
        Email:
        <input type="email" name="email" value={formData.email} onChange={handleChange} />
      </label>
      <label>
        Message:
        <textarea name="message" value={formData.message} onChange={handleChange}></textarea>
      </label>
      <button type="submit">Submit</button>
    </form>
  );
};

export default MyForm;



//################# // Accordion //###################################


import React, { useState } from 'react';
function Accordion({ title, content }) {
  const [isExpanded, setIsExpanded] = useState(false);

  const toggleAccordion = () => {
    setIsExpanded(!isExpanded);
    console.log(isExpanded);
  };

  const accordionStyle = {
    border: '1px solid #ccc',
    marginBottom: '10px',
  };

  const headerStyle = {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '10px',
    cursor: 'pointer',
    backgroundColor: '#f5f5f5',
  };

  const iconStyle = {
    width: '10px',
    height: '10px',
    borderLeft: '2px solid #333',
    borderBottom: '2px solid #333',
    transform: isExpanded ? 'rotate(-136deg)' : 'none',
    transition: 'transform 0.3s ease',
  };

  const contentStyle = {
    padding: '10px',
    backgroundColor: '#fff',
  };

  return (

    <>
   
    <div className="accordion" style={accordionStyle}>
          <div className="accordion-header" style={headerStyle} onClick={toggleAccordion}>
              <h3>{title}</h3>
              <span className="icon" style={iconStyle}></span>
          </div>

          {isExpanded && <div className="accordion-content" style={contentStyle}>{content}</div>}

      </div><div className="accordion" style={accordionStyle}>
              <div className="accordion-header" style={headerStyle} onClick={toggleAccordion}>
                  <h3>{title}</h3>
                  <span className="icon" style={iconStyle}></span>
              </div>
              {isExpanded && <div className="accordion-content" style={contentStyle}>{content}</div>}
          </div></>
  );
}

export default Accordion;




//########## // otp //###################################


To generate an OTP (One-Time Password) using React on the frontend and Node.js on the backend, you can follow these steps:

Set up the Node.js backend:

Create a new Node.js project.
Install the necessary dependencies, such as express and jsonwebtoken.
Create an API endpoint that generates and sends the OTP to the frontend.
Implement the React frontend:

Create a form in your React component where users can input their phone number or email address.
Handle the form submission event and send a request to the backend API endpoint to generate the OTP.
Display the OTP input field to the user.
Connect the frontend and backend:

Make an API call from the React frontend to the Node.js backend to request the OTP generation.
The backend generates the OTP and sends it back as a response to the frontend.
Display the OTP input field on the frontend and allow the user to enter the received OTP.
Validate the entered OTP on the frontend by making another API call to the backend.
Here's a simplified example to illustrate the implementation:

Node.js Backend (using Express):

javascript:
Copy code
const express = require('express');
const jwt = require('jsonwebtoken');

const app = express();
const secretKey = 'your_secret_key';

app.get('/generate-otp', (req, res) => {
  // Generate a random 6-digit OTP
  const otp = Math.floor(100000 + Math.random() * 900000);
  
  // Generate a JWT token with the OTP
  const token = jwt.sign({ otp }, secretKey, { expiresIn: '5m' });
  
  // Send the token (OTP) to the frontend
  res.json({ token });
});

app.listen(5000, () => {
  console.log('Server is running on port 5000');
});

React Frontend:

jsx
Copy code


import React, { useState } from 'react';

const MyForm = () => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [otp, setOtp] = useState('');
  
  const handlePhoneNumberChange = (e) => {
    setPhoneNumber(e.target.value);
  };
  
  const handleOtpChange = (e) => {
    setOtp(e.target.value);
  };
  
  const handleGenerateOtp = async () => {
    try {
      // Send a request to the backend to generate OTP
      const response = await fetch('http://localhost:5000/generate-otp');
      const data = await response.json();
      
      // Display the received OTP to the user
      alert(`OTP: ${data.token}`);
    } catch (error) {
      console.log('Error generating OTP', error);
    }
  };
  
  const handleVerifyOtp = () => {
    // Send the entered OTP to the backend for verification
    // You can implement this part as per your requirements
  };
  
  return (
    <div>
      <label>Phone Number:</label>
      <input type="text" value={phoneNumber} onChange={handlePhoneNumberChange} />
      <button onClick={handleGenerateOtp}>Generate OTP</button>
      
      <label>OTP:</label>
      <input type="text" value={otp} onChange={handleOtpChange} />
      <button onClick={handleVerifyOtp}>Verify OTP</button>
    </div>
  );
};

export default MyForm;
In this example, when the "Generate OTP" button is clicked, a request is sent to the backend /generate-otp endpoint. The backend generates a random OTP, signs it with a JWT token, and sends it back as a response. The received OTP is then displayed to the user.

Note that this is a basic implementation and does not cover the actual OTP verification or security aspects. It's essential to consider additional measures such as rate limiting, token expiration, and secure communication to ensure the safety of the OTP generation and verification process.

//##################### validation ###############


import React, { useState } from 'react';
import './Example.css';

const MyForm = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [errors, setErrors] = useState({});

  const validateForm = () => {
    let errors = {};

    if (!name) {
      errors.name = 'Name is required';
    }

    if (!email) {
      errors.email = 'Email is required';
    } else if (!/^\S+@\S+\.\S+$/.test(email)) {
      errors.email = 'Invalid email format';
    }

    if (!password) {
      errors.password = 'Password is required';
    } else if (password.length < 6) {
      errors.password = 'Password should be at least 6 characters long';
    }

    setErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    const isFormValid = validateForm();

    if (isFormValid) {
      const formData = {
        name,
        email,
        password
      };

      const jsonData = JSON.stringify(formData);
      console.log(jsonData);
      // Perform further actions with the JSON data
    }
  };

  return (
    <div className='dashboard'>
    <form onSubmit={handleSubmit}>
      <div>
        <label>Name:</label>
        <input type="text" value={name} onChange={(e) => setName(e.target.value)} />
        {errors.name && <span>{errors.name}</span>}
      </div>
      <div>
        <label>Email:</label>
        <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
        {errors.email && <span>{errors.email}</span>}
      </div>
      <div>
        <label>Password:</label>
        <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
        {errors.password && <span>{errors.password}</span>}
      </div>
      <button type="submit">Submit</button>
    </form>
    </div>
  );
};

export default MyForm;








